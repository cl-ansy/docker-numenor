services:
  authentik:
    image: ghcr.io/goauthentik/server:latest
    container_name: authentik
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    networks:
      - t3_proxy
      - db
    command: server
    user: ${PUID}:${PGID}
    depends_on:
      authentik-postgres:
        condition: service_healthy
      authentik-redis:
        condition: service_healthy
    environment:
      - AUTHENTIK_REDIS__HOST
      - AUTHENTIK_REDIS__PORT
      - AUTHENTIK_POSTGRESQL__HOST
      - AUTHENTIK_POSTGRESQL__PORT
      - AUTHENTIK_POSTGRESQL__NAME
      - AUTHENTIK_POSTGRESQL__USER=file:///run/secrets/authentik_postgres_user
      - AUTHENTIK_POSTGRESQL__PASSWORD=file:///run/secrets/authentik_postgres_password
      - AUTHENTIK_SECRET_KEY=file:///run/secrets/authentik_secret_key
      - AUTHENTIK_LOG_LEVEL=info
      - AUTHENTIK_DISABLE_STARTUP_ANALYTICS=true
      - AUTHENTIK_DISABLE_UPDATE_CHECK=false
      - AUTHENTIK_ERROR_REPORTING__ENABLED=false
    secrets:
      - authentik_postgres_user
      - authentik_postgres_password
      - authentik_secret_key
    volumes:
      - $DOCKERDIR/appdata/authentik/media:/media
      - $DOCKERDIR/appdata/authentik/custom-templates:/templates
      - $DOCKERDIR/appdata/authentik/brand/outer_tech_logo.svg:/web/dist/assets/icons/icon_left_brand.svg
      - $DOCKERDIR/appdata/authentik/brand/icon.png:/web/dist/assets/icons/icon.png
      - $DOCKERDIR/appdata/authentik/brand/flow_background.jpg:/web/dist/assets/images/flow_background.jpg
      - $DOCKERDIR/appdata/authentik/brand/custom.css:/web/dist/custom.css
    labels:
      - traefik.enable=true
      - traefik.http.routers.authentik-rtr.entrypoints=websecure
      - traefik.http.routers.authentik-rtr.rule=Host(`auth.$DOMAINNAME`)
      # Catch any subdomain using individual application forward authentication
      # - traefik.http.routers.authentik-outpost-rtr.rule=HostRegexp(`{subdomain:[a-z0-9-]+}.${DOMAINNAME}`) && PathPrefix(`/outpost.goauthentik.io/`)
      - traefik.http.routers.authentik-rtr.service=authentik-svc
      - traefik.http.services.authentik-svc.loadbalancer.server.port=9000

  authentik-worker:
    image: ghcr.io/goauthentik/server:latest
    container_name: authentik-worker
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    networks:
      - t3_proxy
      - socket_proxy
      - db
    command: worker
    user: ${PUID}:${PGID}
    depends_on:
      authentik-postgres:
        condition: service_healthy
      authentik-redis:
        condition: service_healthy
    environment:
      - DOCKER_HOST
      - AUTHENTIK_REDIS__HOST
      - AUTHENTIK_REDIS__PORT
      - AUTHENTIK_POSTGRESQL__HOST
      - AUTHENTIK_POSTGRESQL__PORT
      - AUTHENTIK_POSTGRESQL__NAME
      - AUTHENTIK_POSTGRESQL__USER=file:///run/secrets/authentik_postgres_user
      - AUTHENTIK_POSTGRESQL__PASSWORD=file:///run/secrets/authentik_postgres_password
      - AUTHENTIK_SECRET_KEY=file:///run/secrets/authentik_secret_key
      - AUTHENTIK_LOG_LEVEL=info
      - AUTHENTIK_DISABLE_STARTUP_ANALYTICS=true
      - AUTHENTIK_DISABLE_UPDATE_CHECK=false
      - AUTHENTIK_ERROR_REPORTING__ENABLED=false
    secrets:
      - authentik_postgres_user
      - authentik_postgres_password
      - authentik_secret_key
    volumes:
      - $DOCKERDIR/appdata/authentik/media:/media
      - $DOCKERDIR/appdata/authentik/custom-templates:/templates

  authentik-postgres:
    image: postgres:16-alpine
    container_name: authentik-postgres
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    command: -p $AUTHENTIK_POSTGRESQL__PORT
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    networks:
      - db
    volumes:
      - $DOCKERDIR/appdata/authentik-postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=$AUTHENTIK_POSTGRESQL__NAME
      - POSTGRES_USER_FILE=/run/secrets/authentik_postgres_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/authentik_postgres_password
    secrets:
      - authentik_postgres_user
      - authentik_postgres_password

  authentik-redis:
    image: docker.io/library/redis:alpine
    container_name: authentik-redis
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    command: --save 60 1 --loglevel warning --port $AUTHENTIK_REDIS__PORT
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    networks:
      - db
    volumes:
      - $DOCKERDIR/appdata/authentik-redis:/data

